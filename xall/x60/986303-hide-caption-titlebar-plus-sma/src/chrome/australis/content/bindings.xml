<?xml version="1.0"?>
<!DOCTYPE bindings>

<bindings id="hcp_miscBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="hcp_toolbarbutton-drag"
           extends="chrome://global/content/bindings/toolbarbutton.xml#toolbarbutton">
    <implementation>
      <field name="_dragBindingAlive">true</field>
      <constructor><![CDATA[
        if (!this._draggableStarted) {
          this._draggableStarted = true;
          try {
            let tmp = {};
            Components.utils.import("resource://gre/modules/WindowDraggingUtils.jsm", tmp);
            let draggableThis = new tmp.WindowDraggingElement(this, window);
            draggableThis.mouseDownCheck = function(e) {
              // Don't move while customizing. TODO: for controls/buttons!
              return this._dragBindingAlive !== undefined? this._dragBindingAlive: false; 
       		            /*  && this.getAttribute("customizing") != "true"; */
            };
          } catch (e) {}
        }
      ]]></constructor>
    </implementation>
  </binding>
 
  <binding id="hcp_toolbardecoration-drag"
           extends="chrome://global/content/bindings/toolbar.xml#toolbardecoration">
    <implementation>
      <field name="_dragBindingAlive">true</field>
      <constructor><![CDATA[
        if (!this._draggableStarted) {
          this._draggableStarted = true;
          try {
            let tmp = {};
            Components.utils.import("resource://gre/modules/WindowDraggingUtils.jsm", tmp);
            let draggableThis = new tmp.WindowDraggingElement(this, window);
            draggableThis.mouseDownCheck = function(e) {
              // Don't move while customizing. TODO: for controls/buttons!
              return this._dragBindingAlive !== undefined? this._dragBindingAlive: false; 
       		            /*  && this.getAttribute("customizing") != "true"; */
            };
          } catch (e) {}
        }
      ]]></constructor>
    </implementation>
  </binding>
 
</bindings>
