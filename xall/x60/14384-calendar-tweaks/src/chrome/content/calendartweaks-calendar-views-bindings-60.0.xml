<?xml version="1.0" encoding="UTF-8"?>

<!--
/************************************************************************/
/*                                                                      */
/*      Calendar Tweaks  -  Thunderbird Extension  -  Calendar Views    */
/*                                                                      */
/*      XML (XBL) for Calendar Views bindings                           */
/*                                                                      */
/*      Copyright (C) 2008-2018  by  DW-dev                             */
/*                                                                      */
/*      Last Edit  -  23 Aug 2018                                       */
/*                                                                      */
/************************************************************************/
-->    

<!-- Modified from chrome://calendar/content/calendar-views.xml -->
<!-- Modified from chrome://calendar/content/calendar-month-view.xml -->
<!-- Modified from chrome://calendar/content/calendar-multiday-view.xml -->
<!-- Modified from chrome://calendar/content/calendar-view-core.xml -->
<!-- Modified from chrome://calendar/content/agenda-listbox.xml -->

<!DOCTYPE bindings [                                                                                          <!--DW-->
<!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">                                              <!--DW-->
%globalDTD;                                                                                                   <!--DW-->
<!ENTITY % calendartweaksDTD SYSTEM "chrome://calendartweaks/locale/calendartweaks.dtd">                      <!--DW-->
%calendartweaksDTD;                                                                                           <!--DW-->
]>                                                                                                            <!--DW-->

<bindings id="calendartweaks-calendar-views-bindings"
  xmlns="http://www.mozilla.org/xbl"
  xmlns:html="http://www.w3.org/1999/xhtml"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="calendar-editable-item-repeating-category" extends="chrome://calendar/content/calendar-view-core.xml#calendar-editable-item">  <!--DW-->

    <!-- Modified from chrome://calendar/content/calendar-view-core.xml#calendar-editable-item -->

    <content mousethrough="never"
             tooltip="itemTooltip"
             tabindex="-1">
      <xul:vbox flex="1">
        <xul:hbox>
          <xul:box anonid="event-container"
                   class="calendar-color-box"
                   xbl:inherits="calendar-uri,calendar-id,categories"
                   flex="1">                                                                                  <!--DW-->
            <xul:box class="calendar-event-selection" orient="horizontal" flex="1">
              <xul:stack anonid="eventbox"
                         class="calendar-event-box-container"
                         flex="1"
                         xbl:inherits="readonly,flashing,alarm,allday,priority,progress,status,calendar,categories">
                <xul:hbox class="calendar-event-details">
                  <xul:vbox align="left" flex="1" xbl:inherits="context">
                    <xul:label anonid="event-name" crop="end" style="margin: 0;"/>
                    <xul:textbox anonid="event-name-textbox"
                                 class="calendar-event-details-core title-desc"
                                 hidden="true"
                                 style="background: transparent !important;"
                                 wrap="true"/>
                    <xul:label anonid="event-location"
                               crop="end"
                               class="calendar-event-details-core location-desc"/>
                    <xul:spacer flex="1"/>
                  </xul:vbox>
                  <xul:stack>
                    <xul:calendar-category-box anonid="category-box"
                                               xbl:inherits="categories"
                                               pack="end"/>
                    <xul:hbox align="center">
                      <xul:hbox class="repeat-icons-box">                                                     <!--DW-->
                        <xul:image/>                                                                          <!--DW-->
                      </xul:hbox>                                                                             <!--DW-->
                      <xul:hbox anonid="alarm-icons-box"
                                class="alarm-icons-box"
                                align="center"
                                xbl:inherits="flashing"/>
                      <xul:image anonid="item-classification-box"
                                  class="item-classification-box"
                                  pack="end"/>
                    </xul:hbox>
                  </xul:stack>
                </xul:hbox>
              </xul:stack>
            </xul:box>
          </xul:box>
        </xul:hbox>
      </xul:vbox>
    </content>

    <!-- Modified from chrome://calendar/content/calendar-view-core.xml#calendar-editable-item -->

    <implementation>

      <property name="occurrence">
        <getter><![CDATA[
            return this.mOccurrence;
        ]]></getter>
        <setter><![CDATA[
            this.mOccurrence = val;
            this.setEditableLabel();
            this.setLocationLabel();
            this.setCSSClasses();

            var item = this.mOccurrence;                                                                         /*DW*/
            var calcolorbox = document.getAnonymousElementByAttribute(this,"anonid","event-container");          /*DW*/
            if (item.parentItem != item && item.parentItem.recurrenceInfo)                                       /*DW*/
            {                                                                                                    /*DW*/
              if (item.parentItem.recurrenceInfo.getExceptionFor(item.recurrenceId))                             /*DW*/
              {                                                                                                  /*DW*/
                calcolorbox.setAttribute("recurrence","except");                                                 /*DW*/
              }                                                                                                  /*DW*/
              else                                                                                               /*DW*/
              {                                                                                                  /*DW*/
                calcolorbox.setAttribute("recurrence","normal");                                                 /*DW*/
              }                                                                                                  /*DW*/
            }                                                                                                    /*DW*/

            var calcolor = ((this.mOccurrence &&                                                                 /*DW*/
                             this.mOccurrence.calendar.getProperty("color")) ||                                  /*DW*/
                            "#a8c2e1");                                                                          /*DW*/

            var catname = this.mOccurrence.getCategories({});                                                    /*DW*/
            if (typeof catname[0] == "undefined") catname[0] = "";                                               /*DW*/
            var catnamefix = cal.view.formatStringForCSSRule(catname[0]);                                        /*DW*/
            var catcolor = Preferences.get("calendar.category.color." + catnamefix) || "#E0E0E0";                /*DW*/

            var catbox = document.getAnonymousElementByAttribute(this, "anonid", "category-box");                /*DW*/
            var catcolorbox = document.getAnonymousElementByAttribute(catbox, "anonid", "category-box");         /*DW*/
            calcolorbox.style.removeProperty("background-color");                                                /*DW*/
            calcolorbox.style.removeProperty("color");                                                           /*DW*/
            catcolorbox.style.removeProperty("background-color");                                                /*DW*/
            catbox.style.removeProperty("display");                                                              /*DW*/

            var msgrWindow = document.getElementById("messengerWindow");                                         /*DW*/
            if (msgrWindow.hasAttribute("calendartweaks-eventbkgdcolor"))                                        /*DW*/
            {                                                                                                    /*DW*/
              if (msgrWindow.hasAttribute("calendartweaks-eventbkgdnocat") && catcolor == "#E0E0E0")             /*DW*/
                 catcolor = calcolor;                                                                            /*DW*/
              else catbox.style.setProperty("display","-moz-box","");                                            /*DW*/
              calcolorbox.style.setProperty("background-color",catcolor,"");                                     /*DW*/
              calcolorbox.style.setProperty("color",cal.view.getContrastingTextColor(catcolor),"");              /*DW*/
              catcolorbox.style.setProperty("background-color",calcolor,"");                                     /*DW*/
            }                                                                                                    /*DW*/

            return val;
        ]]></setter>
      </property>

    </implementation>

  </binding>

  <binding id="calendar-event-box-repeating-category" extends="chrome://calendar/content/calendar-multiday-view.xml#calendar-event-box">  <!--DW-->

    <!-- Modified from chrome://calendar/content/calendar-multiday-view.xml#calendar-event-box -->

    <content mousethrough="never" tooltip="itemTooltip">
      <xul:box xbl:inherits="orient,width,height" flex="1">
        <xul:box anonid="event-container"
                 class="calendar-color-box"
                 xbl:inherits="orient,readonly,flashing,alarm,allday,priority,progress,
                               status,calendar,categories,calendar-uri,calendar-id,todoType"
                 flex="1">
          <xul:box class="calendar-event-selection" orient="horizontal" flex="1">
            <xul:stack anonid="eventbox"
                       align="stretch"
                       class="calendar-event-box-container"
                       flex="1"
                       xbl:inherits="context,parentorient=orient,readonly,flashing,alarm,allday,priority,progress,status,calendar,categories">
              <xul:hbox class="calendar-event-details"
                        anonid="calendar-event-details"
                        align="start">
                <xul:image anonid="item-icon"
                           class="calendar-item-image"
                           xbl:inherits="progress,allday,itemType,todoType"/>
                <xul:vbox flex="1">
                  <xul:label anonid="event-name" class="calendar-event-details-core title-desc" crop="end"/>
                  <xul:textbox anonid="event-name-textbox"
                               class="plain calendar-event-details-core calendar-event-name-textbox"
                               hidden="true"
                               wrap="true"/>
                  <xul:label anonid="event-location" class="calendar-event-details-core location-desc" crop="end"/>
                </xul:vbox>
              </xul:hbox>
              <xul:stack mousethrough="always">
                <xul:calendar-category-box anonid="category-box" xbl:inherits="categories" pack="end" />
                <xul:hbox align="right">
                  <xul:hbox class="repeat-icons-box">                                                         <!--DW-->
                    <xul:image/>                                                                              <!--DW-->
                  </xul:hbox>                                                                                 <!--DW-->
                  <xul:hbox anonid="alarm-icons-box"
                            class="alarm-icons-box"
                            pack="end"
                            align="top"
                            xbl:inherits="flashing"/>
                  <xul:image anonid="item-classification-box"
                             class="item-classification-box"
                             pack="end"/>
                </xul:hbox>
              </xul:stack>
              <xul:box xbl:inherits="orient">
                <xul:calendar-event-gripbar anonid="gripbar1"
                                            class="calendar-event-box-grippy-top"
                                            mousethrough="never"
                                            whichside="start"
                                            xbl:inherits="parentorient=orient"/>
                <xul:spacer mousethrough="always" flex="1"/>
                <xul:calendar-event-gripbar anonid="gripbar2"
                                            class="calendar-event-box-grippy-bottom"
                                            mousethrough="never"
                                            whichside="end"
                                            xbl:inherits="parentorient=orient"/>
              </xul:box>
              <!-- Do not insert anything here, otherwise the event boxes will
                   not be resizable using the gripbars. If you want to insert
                   additional elements, do so above the box with the gripbars. -->
            </xul:stack>
          </xul:box>
        </xul:box>
      </xul:box>
    </content>

    <!-- Modified from chrome://calendar/content/calendar-view-core.xml#calendar-editable-item -->

    <implementation>

      <property name="occurrence">
        <getter><![CDATA[
            return this.mOccurrence;
        ]]></getter>
        <setter><![CDATA[
            this.mOccurrence = val;
            this.setEditableLabel();
            this.setLocationLabel();
            this.setCSSClasses();

            var item = this.mOccurrence;                                                                         /*DW*/
            var calcolorbox = document.getAnonymousElementByAttribute(this,"anonid","event-container");          /*DW*/
            if (item.parentItem != item && item.parentItem.recurrenceInfo)                                       /*DW*/
            {                                                                                                    /*DW*/
              if (item.parentItem.recurrenceInfo.getExceptionFor(item.recurrenceId))                             /*DW*/
              {                                                                                                  /*DW*/
                calcolorbox.setAttribute("recurrence","except");                                                 /*DW*/
              }                                                                                                  /*DW*/
              else                                                                                               /*DW*/
              {                                                                                                  /*DW*/
                calcolorbox.setAttribute("recurrence","normal");                                                 /*DW*/
              }                                                                                                  /*DW*/
            }                                                                                                    /*DW*/

            var calcolor = ((this.mOccurrence &&                                                                 /*DW*/
                             this.mOccurrence.calendar.getProperty("color")) ||                                  /*DW*/
                            "#a8c2e1");                                                                          /*DW*/

            var catname = this.mOccurrence.getCategories({});                                                    /*DW*/
            if (typeof catname[0] == "undefined") catname[0] = "";                                               /*DW*/
            var catnamefix = cal.view.formatStringForCSSRule(catname[0]);                                        /*DW*/
            var catcolor = Preferences.get("calendar.category.color." + catnamefix) || "#E0E0E0";                /*DW*/

            var catbox = document.getAnonymousElementByAttribute(this, "anonid", "category-box");                /*DW*/
            var catcolorbox = document.getAnonymousElementByAttribute(catbox, "anonid", "category-box");         /*DW*/
            calcolorbox.style.removeProperty("background-color");                                                /*DW*/
            calcolorbox.style.removeProperty("color");                                                           /*DW*/
            catcolorbox.style.removeProperty("background-color");                                                /*DW*/
            catbox.style.removeProperty("display");                                                              /*DW*/

            var msgrWindow = document.getElementById("messengerWindow");                                         /*DW*/
            if (msgrWindow.hasAttribute("calendartweaks-eventbkgdcolor"))                                        /*DW*/
            {                                                                                                    /*DW*/
              if (msgrWindow.hasAttribute("calendartweaks-eventbkgdnocat") && catcolor == "#E0E0E0")             /*DW*/
                 catcolor = calcolor;                                                                            /*DW*/
              else catbox.style.setProperty("display","-moz-box","");                                            /*DW*/
              calcolorbox.style.setProperty("background-color",catcolor,"");                                     /*DW*/
              calcolorbox.style.setProperty("color",cal.view.getContrastingTextColor(catcolor),"");              /*DW*/
              catcolorbox.style.setProperty("background-color",calcolor,"");                                     /*DW*/
            }                                                                                                    /*DW*/

            return val;
        ]]></setter>
      </property>

    </implementation>

  </binding>

  <binding id="calendar-month-day-box-item-repeating-category" extends="chrome://calendar/content/calendar-month-view.xml#calendar-month-day-box-item">  <!--DW-->

    <!-- Modified from chrome://calendar/content/calendar-month-view.xml#calendar-month-day-box-item -->

    <content mousethrough="never" tooltip="itemTooltip">
      <xul:vbox flex="1">
        <xul:hbox>
          <xul:box anonid="event-container"
                   class="calendar-color-box"
                   xbl:inherits="calendar-uri,calendar-id,categories"
                   flex="1">                                                                                  <!--DW-->
            <xul:box class="calendar-event-selection" orient="horizontal" flex="1">
              <xul:stack anonid="eventbox"
                         class="calendar-event-box-container"
                         xbl:inherits="readonly,flashing,alarm,allday,priority,progress,status,calendar,categories"
                         flex="1">
                <xul:hbox anonid="event-detail-box"
                          class="calendar-event-details">
                  <xul:vbox pack="center">
                    <xul:image anonid="item-icon"
                               class="calendar-item-image"
                               xbl:inherits="progress,allday,itemType,todoType"/>
                  </xul:vbox>
                  <xul:label anonid="item-label"
                             class="calendar-month-day-box-item-label"
                             xbl:inherits="context"/>
                  <xul:vbox align="left"
                            flex="1"
                            xbl:inherits="context">
                    <xul:label anonid="event-name"
                               crop="end"
                               flex="1"
                               style="margin: 0;"/>
                    <xul:textbox anonid="event-name-textbox"
                                 class="plain calendar-event-name-textbox"
                                 crop="end"
                                 hidden="true"
                                 wrap="true"/>
                    <xul:spacer flex="1"/>
                  </xul:vbox>
                  <xul:stack anonid="category-box-stack">
                    <xul:calendar-category-box anonid="category-box" xbl:inherits="categories" pack="end"/>
                    <xul:hbox align="center">
                      <xul:hbox class="repeat-icons-box">                                                     <!--DW-->
                        <xul:image/>                                                                          <!--DW-->
                      </xul:hbox>                                                                             <!--DW-->
                      <xul:hbox anonid="alarm-icons-box"
                                class="alarm-icons-box"
                                pack="end"
                                align="top"
                                xbl:inherits="flashing"/>
                      <xul:image anonid="item-classification-box"
                                 class="item-classification-box"
                                 pack="end"/>
                    </xul:hbox>
                  </xul:stack>
                </xul:hbox>
              </xul:stack>
            </xul:box>
          </xul:box>
        </xul:hbox>
      </xul:vbox>
    </content>

    <!-- Modified from chrome://calendar/content/calendar-month-view.xml#calendar-month-day-box-item -->

    <implementation>

      <property name="occurrence">
        <getter><![CDATA[
            return this.mOccurrence;
        ]]></getter>
        <setter><![CDATA[
            cal.ASSERT(!this.mOccurrence, "Code changes needed to set the occurrence twice", true);
            this.mOccurrence = val;
            if (cal.item.isEvent(val)) {
                if (!val.startDate.isDate) {
                    let label = document.getAnonymousElementByAttribute(this, "anonid", "item-label");
                    let formatter = Components.classes["@mozilla.org/calendar/datetime-formatter;1"]
                                              .getService(Components.interfaces.calIDateTimeFormatter);
                    let timezone = this.calendarView ? this.calendarView.mTimezone
                                                     : cal.dtz.defaultTimezone;
                    let parentDate = cal.dtz.ensureDateTime(this.parentBox.date);
                    let startTime = val.startDate.getInTimezone(timezone);
                    let endTime = val.endDate.getInTimezone(timezone);
                    let nextDay = parentDate.clone();
                    nextDay.day++;
                    let comp = endTime.compare(nextDay);
                    if (startTime.compare(parentDate) == -1) {
                        if (comp == 1) {
                            label.value = "↔";
                        } else if (comp == 0) {
                            label.value = "↤";
                        } else {
                            label.value = "⇥ " + formatter.formatTime(endTime);
                        }
                    } else if (comp == 1) {
                        label.value = "⇤ " + formatter.formatTime(startTime);
                    } else {
                        label.value = formatter.formatTime(startTime);
                    }
                    label.setAttribute("time", "true");
                }
            }

            this.setEditableLabel();
            this.setCSSClasses();

            var item = this.mOccurrence;                                                                         /*DW*/
            var calcolorbox = document.getAnonymousElementByAttribute(this,"anonid","event-container");          /*DW*/
            calcolorbox.setAttribute("calendar-uri", item.calendar.uri.spec);                                    /*DW*/  /* shouldn't be necessary */
            calcolorbox.setAttribute("calendar-id", item.calendar.id);                                           /*DW*/  /* shouldn't be necessary */
            if (item.parentItem != item && item.parentItem.recurrenceInfo)                                       /*DW*/
            {                                                                                                    /*DW*/
              if (item.parentItem.recurrenceInfo.getExceptionFor(item.recurrenceId))                             /*DW*/
              {                                                                                                  /*DW*/
                calcolorbox.setAttribute("recurrence","except");                                                 /*DW*/
              }                                                                                                  /*DW*/
              else                                                                                               /*DW*/
              {                                                                                                  /*DW*/
                calcolorbox.setAttribute("recurrence","normal");                                                 /*DW*/
              }                                                                                                  /*DW*/
            }                                                                                                    /*DW*/

            var calcolor = ((this.mOccurrence &&                                                                 /*DW*/
                             this.mOccurrence.calendar.getProperty("color")) ||                                  /*DW*/
                            "#a8c2e1");                                                                          /*DW*/

            var catname = this.mOccurrence.getCategories({});                                                    /*DW*/
            if (typeof catname[0] == "undefined") catname[0] = "";                                               /*DW*/
            var catnamefix = cal.view.formatStringForCSSRule(catname[0]);                                        /*DW*/
            var catcolor = Preferences.get("calendar.category.color." + catnamefix) || "#E0E0E0";                /*DW*/

            var catbox = document.getAnonymousElementByAttribute(this, "anonid", "category-box");                /*DW*/
            var catcolorbox = document.getAnonymousElementByAttribute(catbox, "anonid", "category-box");         /*DW*/
            calcolorbox.style.removeProperty("background-color");                                                /*DW*/
            calcolorbox.style.removeProperty("color");                                                           /*DW*/
            catcolorbox.style.removeProperty("background-color");                                                /*DW*/
            catbox.style.removeProperty("display");                                                              /*DW*/

            var msgrWindow = document.getElementById("messengerWindow");                                         /*DW*/
            if (msgrWindow.hasAttribute("calendartweaks-eventbkgdcolor"))                                        /*DW*/
            {                                                                                                    /*DW*/
              if (msgrWindow.hasAttribute("calendartweaks-eventbkgdnocat") && catcolor == "#E0E0E0")             /*DW*/
                 catcolor = calcolor;                                                                            /*DW*/
              else catbox.style.setProperty("display","-moz-box","");                                            /*DW*/
              calcolorbox.style.setProperty("background-color",catcolor,"");                                     /*DW*/
              calcolorbox.style.setProperty("color",cal.view.getContrastingTextColor(catcolor),"");              /*DW*/
              catcolorbox.style.setProperty("background-color",calcolor,"");                                     /*DW*/
            }                                                                                                    /*DW*/

            return val;
        ]]></setter>
      </property>

    </implementation>

  </binding>

  <binding id="agenda-richlist-item-category" extends="chrome://calendar/content/agenda-listbox.xml#agenda-richlist-item">  <!--DW-->

    <!-- Modified from chrome://calendar/content/agenda-listbox.xml#agenda-richlist-item -->

    <content tooltip="itemTooltip">
      <xul:hbox anonid="agenda-container-box" class="agenda-container-box" xbl:inherits="selected,disabled,current" flex="1">
        <xul:hbox>
          <xul:vbox>
            <xul:image anonid="agenda-calendar-image" class="agenda-calendar-image"/>
            <xul:spacer flex="1"/>
          </xul:vbox>
        </xul:hbox>
        <xul:vbox anonid="agenda-description" class="agenda-description" flex="1">                            <!--DW-->
          <xul:hbox align="start" class="agenda-start-box">                                                   <!--DW-->
            <xul:image anonid="agenda-multiDayEvent-image" class="agenda-multiDayEvent-image"/>
            <xul:label anonid="agenda-event-start" class="agenda-event-start" crop="end" flex="1" xbl:inherits="selected"/>
          </xul:hbox>
          <xul:hbox anonid="agenda-title-box" class="agenda-title-box" flex="1" xbl:inherits="calendar-uri,calendar-id">  <!--DW-->
            <xul:label anonid="agenda-event-title" class="agenda-event-title" crop="end" xbl:inherits="selected"/>
            <xul:calendar-category-box anonid="category-box" xbl:inherits="categories" pack="end"/>           <!--DW-->
          </xul:hbox>                                                                                         <!--DW-->
        </xul:vbox>
      </xul:hbox>
    </content>

    <!-- Modified from chrome://calendar/content/agenda-listbox.xml#agenda-richlist-item -->

    <implementation>

      <method name="setOccurrence">
        <parameter name="aItem"/>
        <parameter name="aPeriod"/>
        <body><![CDATA[
            this.mOccurrence = aItem;
            this.setAttribute("status", aItem.status);
            let dateFormatter = Components.classes["@mozilla.org/calendar/datetime-formatter;1"]
                                  .getService(Components.interfaces.calIDateTimeFormatter);

            let periodStartDate = aPeriod.start.clone();
            periodStartDate.isDate = true;
            let periodEndDate = aPeriod.end.clone();
            periodEndDate.day--;
            let start = this.mOccurrence[cal.dtz.startDateProp(this.mOccurrence)]
                            .getInTimezone(cal.dtz.defaultTimezone);
            let end = this.mOccurrence[cal.dtz.endDateProp(this.mOccurrence)]
                          .getInTimezone(cal.dtz.defaultTimezone);
            let startDate = start.clone();
            startDate.isDate = true;
            let endDate = end.clone();
            endDate.isDate = true;
            let endAtMidnight = (end.hour == 0 && end.minute == 0);
            if (endAtMidnight) {
                endDate.day--;
            }
            let now = cal.dtz.now();
            now.isDate = true;
            let longFormat = periodStartDate.subtractDate(now).days > 1;

            let duration = "";
            let iconType = "";
            if (startDate.compare(endDate) == 0) {
                // event that starts and ends in the same day, midnight included
                duration = longFormat ? dateFormatter.formatDateTime(start) :
                                        dateFormatter.formatTime(start);
            } else {
                // event spanning multiple days
                if (startDate.compare(periodStartDate) >= 0 &&
                     startDate.compare(periodEndDate) <= 0) {
                    iconType = "start";
                    duration = longFormat ? dateFormatter.formatDateTime(start) :
                                            dateFormatter.formatTime(start);
                } else if (endDate.compare(periodStartDate) >= 0 &&
                           endDate.compare(periodEndDate) <= 0) {
                    iconType = "end";
                    if (endAtMidnight) {
                        duration = dateFormatter.formatDate(endDate) + " ";
                        duration = longFormat ? duration + calGetString("dateFormat", "midnight") :
                                                calGetString("dateFormat", "midnight");
                    } else {
                        duration = longFormat ? dateFormatter.formatDateTime(end) :
                                                dateFormatter.formatTime(end);
                    }
                } else {
                    iconType = "continue";
                }
            }
            let multiDayImage = document.getAnonymousElementByAttribute(this, "anonid", "agenda-multiDayEvent-image");
            multiDayImage.setAttribute("type", iconType);
            let durationbox = document.getAnonymousElementByAttribute(this, "anonid", "agenda-event-start");
            durationbox.textContent = duration;

            this.setAttribute("longformat",longFormat);                                                          /*DW*/

            // show items with time only (today & tomorrow) as one line.
            //  if (longFormat) {                                                                                /*DW*/
                let titlebox = document.getAnonymousElementByAttribute(this, "anonid", "agenda-event-title");
                titlebox.textContent = aItem.title;
            //  } else {                                                                                         /*DW*/
            //      durationbox.textContent += " " + aItem.title;                                                /*DW*/
            //  }                                                                                                /*DW*/
            this.refreshColor();
        ]]></body>
      </method>

      <method name="refreshColor">
        <body><![CDATA[
            var calcolor = ((this.mOccurrence &&
                             this.mOccurrence.calendar.getProperty("color")) ||
                            "#a8c2e1");

            var imagebox = document.getAnonymousElementByAttribute(this, "anonid", "agenda-calendar-image");
            imagebox.setAttribute("style", "background-color: " + calcolor + ";");

            var catname = this.mOccurrence.getCategories({});                                                    /*DW*/
            if (typeof catname[0] == "undefined") catname[0] = "";                                               /*DW*/
            var catnamefix = cal.view.formatStringForCSSRule(catname[0]);                                        /*DW*/
            var catcolor = Preferences.get("calendar.category.color." + catnamefix) || "#E0E0E0";                /*DW*/

            this.setAttribute("categories",catnamefix);                                                          /*DW*/
            this.setAttribute("calendar-id",this.mOccurrence.calendar.id);                                       /*DW*/
            this.setAttribute("calendar-uri",this.mOccurrence.calendar.uri.spec);                                /*DW*/

            var titlebox = document.getAnonymousElementByAttribute(this, "anonid", "agenda-title-box");          /*DW*/
            var catbox = document.getAnonymousElementByAttribute(this, "anonid", "category-box");                /*DW*/
            var catcolorbox = document.getAnonymousElementByAttribute(catbox, "anonid", "category-box");         /*DW*/
            titlebox.setAttribute("class","agenda-title-box","");                                                /*DW*/
            titlebox.style.removeProperty("background-color");                                                   /*DW*/
            titlebox.style.removeProperty("color");                                                              /*DW*/
            catcolorbox.style.removeProperty("background-color");                                                /*DW*/
            catbox.style.removeProperty("display");                                                              /*DW*/

            var msgrWindow = document.getElementById("messengerWindow");                                         /*DW*/
            if (msgrWindow.hasAttribute("calendartweaks-eventtodaypane"))                                        /*DW*/
            {                                                                                                    /*DW*/
              titlebox.setAttribute("class","agenda-title-box calendar-color-box","");                           /*DW*/
            }                                                                                                    /*DW*/
            if (msgrWindow.hasAttribute("calendartweaks-eventbkgdcolor"))                                        /*DW*/
            {                                                                                                    /*DW*/
              if (msgrWindow.hasAttribute("calendartweaks-eventbkgdnocat") && catcolor == "#E0E0E0")             /*DW*/
              {                                                                                                  /*DW*/
                catcolor = calcolor;                                                                             /*DW*/
                catbox.style.setProperty("display","none","");                                                   /*DW*/
              }                                                                                                  /*DW*/
              imagebox.setAttribute("style", "background-color: " + catcolor + ";");                             /*DW*/
              if (msgrWindow.hasAttribute("calendartweaks-eventtodaypane"))                                      /*DW*/
              {                                                                                                  /*DW*/
                titlebox.style.setProperty("background-color",catcolor,"");                                      /*DW*/
                titlebox.style.setProperty("color",cal.view.getContrastingTextColor(catcolor),"");               /*DW*/
                catcolorbox.style.setProperty("background-color",calcolor,"");                                   /*DW*/
              }                                                                                                  /*DW*/
            }                                                                                                    /*DW*/
            else if (catcolor == "#E0E0E0") catbox.style.setProperty("display","none","");                       /*DW*/
        ]]></body>
      </method>

    </implementation>

  </binding>

  <binding id="calendar-week-view-alldaylabel" extends="chrome://calendar/content/calendar-views.xml#calendar-week-view">  <!--DW-->

    <!-- Modified from chrome://calendar/content/calendar-multiday-view.xml#calendar-multiday-view -->

    <content flex="1" orient="vertical" xbl:inherits="context,item-context">
      <xul:box anonid="mainbox" class="multiday-view-main-box" flex="1">
        <!-- these boxes are tricky: width or height in CSS depend on orient -->
        <xul:box anonid="labelbox" class="multiday-view-label-box">
          <xul:box anonid="labeltimespacer" class="multiday-view-label-time-spacer"/>
          <xul:box anonid="labeldaybox"
                   class="multiday-view-label-day-box"
                   flex="1"
                   equalsize="always"/>
          <xul:box anonid="labelscrollbarspacer" class="multiday-labelscrollbarspacer"/>
        </xul:box>
        <xul:box anonid="headerbox" class="multiday-view-header-box">
          <xul:box anonid="headertimespacer" class="multiday-view-header-time-spacer">&calendartweaks.allday;</xul:box>  <!--DW-->
          <xul:box anonid="headerdaybox" class="multiday-view-header-day-box" flex="1" equalsize="always" />
          <xul:box anonid="headerscrollbarspacer" class="multiday-headerscrollbarspacer"/>
        </xul:box>
        <xul:scrollbox anonid="scrollbox" flex="1"
                       onoverflow="adjustScrollBarSpacers();" onunderflow="adjustScrollBarSpacers();">
          <!-- the orient of the calendar-time-bar needs to be the opposite of the parent -->
          <xul:calendar-time-bar xbl:inherits="orient" anonid="timebar"/>
          <xul:box anonid="daybox" class="multiday-view-day-box" flex="1"
                   equalsize="always"/>
        </xul:scrollbox>
      </xul:box>
    </content>

  </binding>

  <binding id="calendar-day-view-alldaylabel-showondayview" extends="chrome://calendar/content/calendar-views.xml#calendar-day-view">  <!--DW-->

    <!-- Modified from chrome://calendar/content/calendar-multiday-view.xml#calendar-multiday-view -->

    <content flex="1" orient="vertical" xbl:inherits="context,item-context">
      <xul:box anonid="mainbox" class="multiday-view-main-box" flex="1">
        <!-- these boxes are tricky: width or height in CSS depend on orient -->
        <xul:box anonid="labelbox" class="multiday-view-label-box">
          <xul:box anonid="labeltimespacer" class="multiday-view-label-time-spacer"/>
          <xul:box anonid="labeldaybox"
                   class="multiday-view-label-day-box"
                   flex="1"
                   equalsize="always"/>
          <xul:box anonid="labelscrollbarspacer" class="multiday-labelscrollbarspacer"/>
        </xul:box>
        <xul:box anonid="headerbox" class="multiday-view-header-box">
          <xul:box anonid="headertimespacer" class="multiday-view-header-time-spacer">&calendartweaks.allday;</xul:box>  <!--DW-->
          <xul:box anonid="headerdaybox" class="multiday-view-header-day-box" flex="1" equalsize="always" />
          <xul:box anonid="headerscrollbarspacer" class="multiday-headerscrollbarspacer"/>
        </xul:box>
        <xul:scrollbox anonid="scrollbox" flex="1"
                       onoverflow="adjustScrollBarSpacers();" onunderflow="adjustScrollBarSpacers();">
          <!-- the orient of the calendar-time-bar needs to be the opposite of the parent -->
          <xul:calendar-time-bar xbl:inherits="orient" anonid="timebar"/>
          <xul:box anonid="daybox" class="multiday-view-day-box" flex="1"
                   equalsize="always"/>
        </xul:scrollbox>
      </xul:box>
    </content>

    <!-- Modified from chrome://calendar/content/calendar-multiday-view.xml#calendar-multiday-view -->

    <implementation implements="calICalendarView">

      <property name="selectedDay">
        <getter><![CDATA[
            let selected;
            if (this.numVisibleDates == 1) {
                selected = this.mDateColumns[0].date;
            } else if (this.mSelectedDay) {
                selected = this.mSelectedDay;
            } else if (this.mSelectedDayCol) {
                selected = this.mSelectedDayCol.date;
            }

            // TODO Make sure the selected day is valid
            // TODO select now if it is in the range?
            return selected;
        ]]></getter>
        <setter><![CDATA[
                                                                                                                 /*DW*/  /* section moved down */
            if (this.mSelectedDayCol) {
                this.mSelectedDayCol.column.selected = false;
                this.mSelectedDayCol.header.removeAttribute("selected");

                let child = this.labeldaybox.firstChild;                                                         /*DW*/
                while (child) {                                                                                  /*DW*/
                    child.removeAttribute("selected");                                                           /*DW*/
                    child = child.nextSibling;                                                                   /*DW*/
                }
            }

            let msgrWindow = document.getElementById("messengerWindow");                                         /*DW*/
            if (!msgrWindow.hasAttribute("calendartweaks-showondayview"))                                        /*DW*/
            {                                                                                                    /*DW*/  /* moved down section begin */
                // ignore if just 1 visible, it's always selected,
                // but we don't indicate it
                if (this.numVisibleDates == 1) {
                    this.fireEvent("dayselect", val);
                    return val;
                }
            }                                                                                                    /*DW*/  /* moved down section end */

            if (val) {
                this.mSelectedDayCol = this.findColumnForDate(val);
                if (this.mSelectedDayCol) {
                    this.mSelectedDay = this.mSelectedDayCol.date;
                    this.mSelectedDayCol.column.selected = true;
                    this.mSelectedDayCol.header.setAttribute("selected", "true");
                } else {
                    this.mSelectedDay = val;
                }
            }
            this.fireEvent("dayselect", val);
            return val;
        ]]></setter>
      </property>

      <method name="relayout">
        <body><![CDATA[
            if (!this.mStartDate || !this.mEndDate) {
                return;
            }

            let orient = this.getAttribute("orient") || "horizontal";
            let otherorient = getOtherOrientation(orient);

            let computedDateList = [];
            let startDate = this.mStartDate.clone();
            while (startDate.compare(this.mEndDate) <= 0) {
                let workday = startDate.clone();
                workday.makeImmutable();
                if (this.mDisplayDaysOff) {
                    computedDateList.push(workday);
                } else if (!this.mDaysOffArray.includes(startDate.weekday)) {
                    computedDateList.push(workday);
                }
                startDate.day += 1;
            }
            this.mDateList = computedDateList;

            // unselect previous selected event upon switch views, otherwise those
            // events will stay selected forever, if select other events after
            // change week view.
            this.setSelectedItems(0, [], true);

            let daybox = document.getAnonymousElementByAttribute(this, "anonid", "daybox");
            let headerdaybox = document.getAnonymousElementByAttribute(this, "anonid", "headerdaybox");

            let dayStartMin = this.mDayStartMin;
            let dayEndMin = this.mDayEndMin;
            let setUpDayEventsBox = (aDayBox, date) => {
                aDayBox.setAttribute("class", "calendar-event-column-" + (counter % 2 == 0 ? "even" : "odd"));
                aDayBox.setAttribute("context", this.getAttribute("context"));
                aDayBox.setAttribute("item-context", this.getAttribute("item-context") || this.getAttribute("context"));
                aDayBox.startLayoutBatchChange();
                aDayBox.date = date;
                aDayBox.setAttribute("orient", orient);
                aDayBox.calendarView = this;
                aDayBox.setDayStartEndMinutes(dayStartMin, dayEndMin);
            };

            let setUpDayHeaderBox = (aDayBox, date) => {
                aDayBox.date = date;
                aDayBox.calendarView = this;
                aDayBox.setAttribute("orient", "vertical");
                // Since the calendar-header-container boxes have the same vertical
                // orientation for normal and rotated views, it needs an attribute
                // "rotated" in order to have different css rules.
                setBooleanAttribute(aDayBox, "rotated", orient == "horizontal");
            };

            this.mDateColumns = [];

            // get today's date
            let today = this.today();
            let counter = 0;
            let dayboxkids = daybox.childNodes;
            let headerboxkids = headerdaybox.childNodes;
            let labelboxkids = this.labeldaybox.childNodes;
            let updateTimeIndicator = false;

            for (let date of computedDateList) {
                let dayEventsBox;
                if (counter < dayboxkids.length) {
                    dayEventsBox = dayboxkids[counter];
                    dayEventsBox.removeAttribute("relation");
                    dayEventsBox.mEventInfos = [];
                } else {
                    dayEventsBox = createXULElement("calendar-event-column");
                    dayEventsBox.setAttribute("flex", "1");
                    daybox.appendChild(dayEventsBox);
                }
                setUpDayEventsBox(dayEventsBox, date);

                let dayHeaderBox;
                if (counter < headerboxkids.length) {
                    dayHeaderBox = headerboxkids[counter];
                    // Delete backwards to make sure we get them all
                    // and delete until no more elements are left.
                    while (dayHeaderBox.mItemBoxes.length != 0) {
                        let num = dayHeaderBox.mItemBoxes.length;
                        dayHeaderBox.deleteEvent(dayHeaderBox.mItemBoxes[num-1].occurrence);
                    }
                } else {
                    dayHeaderBox = createXULElement("calendar-header-container");
                    dayHeaderBox.setAttribute("flex", "1");
                    headerdaybox.appendChild(dayHeaderBox);
                }
                setUpDayHeaderBox(dayHeaderBox, date);

                if (this.mDaysOffArray.includes(date.weekday)) {
                    dayEventsBox.dayOff = true;
                    dayHeaderBox.setAttribute("weekend", "true");
                } else {
                    dayEventsBox.dayOff = false;
                    dayHeaderBox.removeAttribute("weekend");
                }
                let labelbox;
                if (counter < labelboxkids.length) {
                    labelbox = labelboxkids[counter];
                    labelbox.date = date;
                } else {
                    labelbox = createXULElement("calendar-day-label");
                    labelbox.setAttribute("orient", otherorient);
                    this.labeldaybox.appendChild(labelbox);
                    labelbox.date = date;
                }
                // Set attributes for date relations and for the time indicator.
                let headerDayBox = document.getAnonymousElementByAttribute(
                                       this, "anonid", "headerdaybox");
                headerDayBox.removeAttribute("todaylastinview");
                dayEventsBox.timeIndicatorBox.setAttribute("hidden", "true");
                switch (date.compare(today)) {
                    case -1: {
                        dayHeaderBox.setAttribute("relation", "past");
                        dayEventsBox.setAttribute("relation", "past");
                        labelbox.setAttribute("relation", "past");
                        break;
                    }
                    case 0: {
                        let relation_ = this.numVisibleDates == 1 ? "today1day" : "today";
                        let msgrWindow = document.getElementById("messengerWindow");                             /*DW*/
                        if (msgrWindow.hasAttribute("calendartweaks-showondayview")) relation_ = "today";        /*DW*/
                        dayHeaderBox.setAttribute("relation", relation_);
                        dayEventsBox.setAttribute("relation", relation_);
                        labelbox.setAttribute("relation", relation_);
                        setBooleanAttribute(dayEventsBox.timeIndicatorBox, "hidden", this.mTimeIndicatorInterval == 0);
                        updateTimeIndicator = true;

                        // Due to equalsize=always being set on the dayboxes
                        // parent, there are a few issues showing the border of
                        // the last daybox correctly. To work around this, we're
                        // setting an attribute we can use in CSS. For more
                        // information about this hack, see bug 455045
                        if (dayHeaderBox == headerdaybox.childNodes[headerdaybox.childNodes.length - 1] &&
                            this.numVisibleDates > 1) {
                            headerDayBox.setAttribute("todaylastinview", "true");
                        }
                        break;
                    }
                    case 1: {
                        dayHeaderBox.setAttribute("relation", "future");
                        dayEventsBox.setAttribute("relation", "future");
                        labelbox.setAttribute("relation", "future");
                        break;
                    }
                }
                // We don't want to actually mess with our original dates, plus
                // they're likely to be immutable.
                let date2 = date.clone();
                date2.isDate = true;
                date2.makeImmutable();
                this.mDateColumns.push({ date: date2, column: dayEventsBox, header: dayHeaderBox });
                counter++;
            }

            // Remove any extra columns that may have been hanging around
            function removeExtraKids(elem) {
                while (counter < elem.childNodes.length) {
                    elem.childNodes[counter].remove();
                }
            }
            removeExtraKids(daybox);
            removeExtraKids(headerdaybox);
            removeExtraKids(this.labeldaybox);

            if (updateTimeIndicator) {
                this.updateTimeIndicatorPosition();
            }

            // fix pixels-per-minute
            this.onResize();
            if (this.mDateColumns) {
                for (let col of this.mDateColumns) {
                    col.column.endLayoutBatchChange();
                }
            }

            // Adjust scrollbar spacers
            this.adjustScrollBarSpacers();

            // Store the start and end of current view. Next time when
            // setDateRange is called, it will use mViewStart and mViewEnd to
            // check if view range has been changed.
            this.mViewStart = this.mStartDate;
            this.mViewEnd = this.mEndDate;

            let toggleStatus = 0;

            if (this.mTasksInView) {
                toggleStatus |= this.mToggleStatusFlag.TasksInView;
            }
            if (this.mWorkdaysOnly) {
                toggleStatus |= this.mToggleStatusFlag.WorkdaysOnly;
            }
            if (this.mShowCompleted) {
                toggleStatus |= this.mToggleStatusFlag.ShowCompleted;
            }

            this.mToggleStatus = toggleStatus;
        ]]></body>
      </method>

    </implementation>

  </binding>

</bindings>
