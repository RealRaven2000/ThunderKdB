/*
 * This file was generated by the MozButton SDK,
 * which is part of the Toolbar Buttons project.
 * You should not edit this file, but rather download
 * the project source and rerun the builder.
 */

const Cc = Components.classes;
const Ci = Components.interfaces;
const Cu = Components.utils;

var EXPORTED_SYMBOLS = ["loadButtons", "unloadButtons", "setupButtons", "shutdownButtons"];

try {
	Cu.import("resource:///modules/CustomizableUI.jsm");
} catch(e) {
	Cu.import("chrome://toolbar-buttons/content/customizable.jsm");
}

Cu.import('resource://gre/modules/Services.jsm');
Cu.import("resource://services-common/stringbundle.js");

try { Cu.import('resource://modules/CustomizableUI.jsm'); } catch(e) {}

var gShutDownFunctions = [];

var toolbar_buttons = {
	interfaces: {},
	// the important global objects used by the extension
	toolbar_button_loader: function(parent, child) {
		var object_name;
		for(object_name in child){
			if(object_name == 'interfaces') {
				toolbar_buttons.toolbar_button_loader(parent.interfaces, child.interfaces);
			} else {
				parent[object_name] = child[object_name];
			}
		}
	},
	registerCleanUpFunction: function(func) {
		gShutDownFunctions.push(func);
	}

};
var loader = Cc["@mozilla.org/moz/jssubscript-loader;1"].getService(Ci.mozIJSSubScriptLoader);
var gScope = this;
// the number at the end forces a reload of the properties file, since sometimes it it catched when we don't want
var buttonStrings = new StringBundle("chrome://toolbar-buttons/locale/button_labels.properties?time=" + Date.now().toString());

function setupButtons() {
	loader.loadSubScript("chrome://toolbar-buttons/content/button.js", gScope);
	loader.loadSubScript("chrome://toolbar-buttons/content/messenger.js", gScope);
		CustomizableUI.createWidget({
		id: 'undo',
		label: buttonStrings.get('undo.label'),
		tooltiptext: buttonStrings.get('undo.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			try { window.CommandUpdate_UndoRedo(); } catch(e) {} window.goDoCommand('cmd_undo');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'print-preview',
		label: buttonStrings.get('print-preview.label'),
		tooltiptext: buttonStrings.get('print-preview.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_printpreview');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'shift-delete',
		label: buttonStrings.get('shift-delete.label'),
		tooltiptext: buttonStrings.get('shift-delete.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_shiftDelete');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'help',
		label: buttonStrings.get('help.label'),
		tooltiptext: buttonStrings.get('help.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.openSupportURL();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'search-messages',
		label: buttonStrings.get('search-messages.label'),
		tooltiptext: buttonStrings.get('search-messages.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.MsgSearchMessages();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'workoffline',
		type: 'custom',
		label: buttonStrings.get('workoffline.label'),
		tooltiptext: buttonStrings.get('workoffline.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'workoffline';
			toolbarbutton_0.setAttribute('label', buttonStrings.get('workoffline.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('workoffline.tooltip'));
			toolbarbutton_0.setAttribute("command", "goOfflineMenuItem");
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'reduce',
		label: buttonStrings.get('reduce.label'),
		tooltiptext: buttonStrings.get('reduce.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_fullZoomReduce')
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'themes',
		label: buttonStrings.get('themes.label'),
		tooltiptext: buttonStrings.get('themes.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.OpenAddonsMgr(event, 'themes', 'addons://list/theme');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-about-about',
		type: 'custom',
		label: buttonStrings.get('tb-about-about.label'),
		tooltiptext: buttonStrings.get('tb-about-about.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'tb-about-about';
			toolbarbutton_0.setAttribute("type", "menu");
			toolbarbutton_0.setAttribute('label', buttonStrings.get('tb-about-about.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('tb-about-about.tooltip'));
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			var menupopup_1 = document.createElement('menupopup');
			menupopup_1.addEventListener('command', function(event) {
				event.stopPropagation();
			}, false);
			menupopup_1.addEventListener('popupshowing', function(event) {
				var aThis = event.target;
			toolbar_buttons.aboutAboutMenu(aThis);
			}, false);
			toolbarbutton_0.appendChild(menupopup_1);
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'minimize-window',
		label: buttonStrings.get('minimize-window.label'),
		tooltiptext: buttonStrings.get('minimize-window.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.minimize();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-file-menu',
		label: buttonStrings.get('tb-file-menu.label'),
		tooltiptext: buttonStrings.get('tb-file-menu.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.showAMenu(event, 'menu_File', 'file-menu');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'find-prev',
		label: buttonStrings.get('find-prev.label'),
		tooltiptext: buttonStrings.get('find-prev.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_findPrevious');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-edit-menu',
		label: buttonStrings.get('tb-edit-menu.label'),
		tooltiptext: buttonStrings.get('tb-edit-menu.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.showAMenu(event, 'menu_Edit', 'edit-menu');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'toggle-read',
		label: buttonStrings.get('toggle-read.label'),
		tooltiptext: buttonStrings.get('toggle-read.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_markAsRead');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'attachments-save',
		label: buttonStrings.get('attachments-save.label'),
		tooltiptext: buttonStrings.get('attachments-save.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.HandleAllAttachments('save');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'redo',
		type: 'custom',
		label: buttonStrings.get('redo.label'),
		tooltiptext: buttonStrings.get('redo.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'redo';
			toolbarbutton_0.setAttribute('label', buttonStrings.get('redo.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('redo.tooltip'));
			toolbarbutton_0.setAttribute("command", "cmd_redo");
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			toolbarbutton_0.setAttribute("key", "key_redo");
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'find',
		label: buttonStrings.get('find.label'),
		tooltiptext: buttonStrings.get('find.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_find');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'saveas',
		label: buttonStrings.get('saveas.label'),
		tooltiptext: buttonStrings.get('saveas.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_saveAsFile')
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'delete-button',
		type: 'custom',
		label: buttonStrings.get('delete.label'),
		tooltiptext: buttonStrings.get('delete.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'delete-button';
			toolbarbutton_0.setAttribute('label', buttonStrings.get('delete.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('delete.tooltip'));
			toolbarbutton_0.setAttribute("command", "cmd_delete");
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			toolbarbutton_0.setAttribute("key", "key_delete");
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'about-plugins',
		label: buttonStrings.get('about-plugins.label'),
		tooltiptext: buttonStrings.get('about-plugins.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.openPageInTab('about:plugins', event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-tools-menu',
		label: buttonStrings.get('tb-tools-menu.label'),
		tooltiptext: buttonStrings.get('tb-tools-menu.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.showAMenu(event, 'tasksMenu', 'menu_Tools', 'tools-menu');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'customize-toolbar',
		type: 'custom',
		label: buttonStrings.get('customize-toolbar.label'),
		tooltiptext: buttonStrings.get('customize-toolbar.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'customize-toolbar';
			toolbarbutton_0.setAttribute('label', buttonStrings.get('customize-toolbar.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('customize-toolbar.tooltip'));
			toolbarbutton_0.setAttribute("command", "cmd_CustomizeMailToolbar");
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'toolbar-menu',
		type: 'custom',
		label: buttonStrings.get('toolbar-menu.label'),
		tooltiptext: buttonStrings.get('toolbar-menu.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'toolbar-menu';
			toolbarbutton_0.setAttribute("type", "menu");
			toolbarbutton_0.setAttribute('label', buttonStrings.get('toolbar-menu.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('toolbar-menu.tooltip'));
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			toolbarbutton_0.addEventListener('popupshowing', function(event) {
				var window = event.target.ownerDocument.defaultView;
			window.onViewToolbarsPopupShowing(event, 'mail-toolbox');
			}, false);
			var menupopup_1 = document.createElement('menupopup');
			menupopup_1.id = 'toolbar-popup';
			menupopup_1.addEventListener('command', function(event) {
				event.stopPropagation();
			}, false);
			toolbarbutton_0.appendChild(menupopup_1);
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'find-again',
		label: buttonStrings.get('find-again.label'),
		tooltiptext: buttonStrings.get('find-again.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_findAgain');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'enlarge',
		label: buttonStrings.get('enlarge.label'),
		tooltiptext: buttonStrings.get('enlarge.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_fullZoomEnlarge')
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'html-mode',
		type: 'custom',
		label: buttonStrings.get('html-mode.label'),
		tooltiptext: buttonStrings.get('html-mode.tooltip'),
		window: 'messageWindow.xul',
		onCreated: function(aNode){
			var document = aNode.ownerDocument;
			toolbar_buttons.loadPrefWatcher(document, "mailnews.display.html_as", "html-mode");
		},
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'html-mode';
			toolbarbutton_0.setAttribute('label', buttonStrings.get('html-mode.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('html-mode.tooltip'));
			toolbarbutton_0.addEventListener('command', function(event) {
				toolbar_buttons.toggleHtmlMode(event);
			}, false);
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			toolbarbutton_0.setAttribute("persist", "html");
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'installaddons',
		label: buttonStrings.get('installaddons.label'),
		tooltiptext: buttonStrings.get('installaddons.tooltip'),
		onClick: function(event) {
			toolbar_buttons.viewAddonsExceptions(event);
		},
		onCommand: function(event) {
			toolbar_buttons.installAddons(event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'forward-as-attachment',
		label: buttonStrings.get('forward-as-attachment.label'),
		tooltiptext: buttonStrings.get('forward-as-attachment.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.MsgForwardAsAttachment(event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'reload-proxy',
		label: buttonStrings.get('reload-proxy.label'),
		tooltiptext: buttonStrings.get('reload-proxy.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.reloadPAC();
		},
		window: 'messageWindow.xul',
		onCreated: function(aNode) {
			var document = aNode.ownerDocument;
			toolbar_buttons.loadPrefWatcher(document, "network.proxy.type", null, toolbar_buttons.setProxyButtonState);
toolbar_buttons.loadPrefWatcher(document, "network.proxy.autoconfig_url", null, toolbar_buttons.setProxyButtonState);
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'import',
		label: buttonStrings.get('import.label'),
		tooltiptext: buttonStrings.get('import.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.toImport();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'profile-folder',
		label: buttonStrings.get('profile-folder.label'),
		tooltiptext: buttonStrings.get('profile-folder.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.profileFolder();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'select-all',
		label: buttonStrings.get('select-all.label'),
		tooltiptext: buttonStrings.get('select-all.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.window.goDoCommand('cmd_selectAll');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'pagesetup',
		label: buttonStrings.get('pagesetup.label'),
		tooltiptext: buttonStrings.get('pagesetup.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_printSetup');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'search-addresses',
		label: buttonStrings.get('search-addresses.label'),
		tooltiptext: buttonStrings.get('search-addresses.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.MsgSearchAddresses(event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'reset',
		label: buttonStrings.get('reset.label'),
		tooltiptext: buttonStrings.get('reset.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_fullZoomReset');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'realNextMessage',
		label: buttonStrings.get('realNextMessage.label'),
		tooltiptext: buttonStrings.get('realNextMessage.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.realNextMessage(event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'realPreviousMessage',
		label: buttonStrings.get('realPreviousMessage.label'),
		tooltiptext: buttonStrings.get('realPreviousMessage.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.realPreviousMessage(event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'about-config',
		label: buttonStrings.get('about-config.label'),
		tooltiptext: buttonStrings.get('about-config.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.openPageInTab('about:config', event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'forward-as-inline',
		label: buttonStrings.get('forward-as-inline.label'),
		tooltiptext: buttonStrings.get('forward-as-inline.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.MsgForwardAsInline(event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-all-menus',
		type: 'custom',
		label: buttonStrings.get('tb-all-menus.label'),
		tooltiptext: buttonStrings.get('tb-all-menus.tooltip'),
		window: 'messageWindow.xul',
		onCreated: function(aNode){
			var document = aNode.ownerDocument;
			toolbar_buttons.allMenusStartUp(document);
		},
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'tb-all-menus';
			toolbarbutton_0.setAttribute("type", "menu");
			toolbarbutton_0.setAttribute('label', buttonStrings.get('tb-all-menus.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('tb-all-menus.tooltip'));
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			var menupopup_1 = document.createElement('menupopup');
			menupopup_1.id = 'tb-all-menus-popup';
			menupopup_1.addEventListener('command', function(event) {
				event.stopPropagation();
			}, false);
			menupopup_1.addEventListener('popupshowing', function(event) {
				var aThis = event.target;
			toolbar_buttons.loadAllMenusMenu(aThis, event);
			}, false);
			menupopup_1.addEventListener('popuphidden', function(event) {
				var aThis = event.target;
			toolbar_buttons.allMenusReturnPopups(aThis, event);
			}, false);
			toolbarbutton_0.appendChild(menupopup_1);
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'page-source',
		label: buttonStrings.get('page-source.label'),
		tooltiptext: buttonStrings.get('page-source.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goDoCommand('cmd_viewPageSource')
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'use-document-fonts',
		label: buttonStrings.get('use-document-fonts.label'),
		tooltiptext: buttonStrings.get('use-document-fonts.tooltip'),
		onCommand: function(event) {
			var aThis = event.target;
			toolbar_buttons.toggleDocumentFonts(aThis);
		},
		window: 'messageWindow.xul',
		onCreated: function(aNode) {
			var document = aNode.ownerDocument;
			toolbar_buttons.loadPrefWatcher(document, "browser.display.use_document_fonts", "use-document-fonts");
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'toggle-proxy',
		type: 'custom',
		label: buttonStrings.get('toggle-proxy.label'),
		tooltiptext: buttonStrings.get('toggle-proxy.tooltip'),
		window: 'messageWindow.xul',
		onCreated: function(aNode){
			var document = aNode.ownerDocument;
			toolbar_buttons.loadPrefWatcher(document, "network.proxy.type", "toggle-proxy");
		},
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'toggle-proxy';
			toolbarbutton_0.setAttribute("type", "menu-button");
			toolbarbutton_0.setAttribute('label', buttonStrings.get('toggle-proxy.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('toggle-proxy.tooltip'));
			toolbarbutton_0.addEventListener('command', function(event) {
				toolbar_buttons.toggleTheProxy();
			}, false);
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			var menupopup_1 = document.createElement('menupopup');
			menupopup_1.addEventListener('click', function(event) {
				event.stopPropagation();
			}, false);
			menupopup_1.addEventListener('command', function(event) {
				toolbar_buttons.setProxyValue(event); event.stopPropagation();
			}, false);
			menupopup_1.addEventListener('popupshowing', function(event) {
				var aThis = event.target;
			toolbar_buttons.setProxyMenuItem(event, aThis);
			}, false);
			var menuitem_2 = document.createElement('menuitem');
			menuitem_2.setAttribute("type", "radio");
			menuitem_2.setAttribute('label', buttonStrings.get('toggle.proxy.direct'));
			menuitem_2.setAttribute("name", "toggle-proxy-settings");
			menuitem_2.setAttribute("value", "0");
			menupopup_1.appendChild(menuitem_2);
			var menuitem_3 = document.createElement('menuitem');
			menuitem_3.setAttribute("type", "radio");
			menuitem_3.setAttribute('label', buttonStrings.get('toggle.proxy.manual'));
			menuitem_3.setAttribute("name", "toggle-proxy-settings");
			menuitem_3.setAttribute("value", "1");
			menupopup_1.appendChild(menuitem_3);
			var menuitem_4 = document.createElement('menuitem');
			menuitem_4.setAttribute("type", "radio");
			menuitem_4.setAttribute('label', buttonStrings.get('toggle.proxy.auto.configuration'));
			menuitem_4.setAttribute("name", "toggle-proxy-settings");
			menuitem_4.setAttribute("value", "2");
			menupopup_1.appendChild(menuitem_4);
			var menuitem_5 = document.createElement('menuitem');
			menuitem_5.setAttribute("type", "radio");
			menuitem_5.setAttribute('label', buttonStrings.get('toggle.proxy.auto.detect'));
			menuitem_5.setAttribute("name", "toggle-proxy-settings");
			menuitem_5.setAttribute("value", "4");
			menupopup_1.appendChild(menuitem_5);
			var menuitem_6 = document.createElement('menuitem');
			menuitem_6.setAttribute("type", "radio");
			menuitem_6.setAttribute('label', buttonStrings.get('toggle.proxy.system'));
			menuitem_6.setAttribute("name", "toggle-proxy-settings");
			menuitem_6.setAttribute("value", "5");
			menupopup_1.appendChild(menuitem_6);
			toolbarbutton_0.appendChild(menupopup_1);
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'preferences',
		type: 'custom',
		label: buttonStrings.get('preferences.label'),
		tooltiptext: buttonStrings.get('preferences.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'preferences';
			toolbarbutton_0.setAttribute('label', buttonStrings.get('preferences.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('preferences.tooltip'));
			toolbarbutton_0.setAttribute("command", "menu_preferences");
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'restart-app',
		label: buttonStrings.get('restart-app.label'),
		tooltiptext: buttonStrings.get('restart-app.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.restartMozilla();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'about-application',
		label: buttonStrings.get('about-application.label'),
		tooltiptext: buttonStrings.get('about-application.tooltip') + ' ' + Cc['@mozilla.org/xre/app-info;1'].createInstance(Ci.nsIXULAppInfo).name,
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.openAboutDialog();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'attachments-detach',
		label: buttonStrings.get('attachments-detach.label'),
		tooltiptext: buttonStrings.get('attachments-detach.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.HandleAllAttachments('detach');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-cookie-manager',
		label: buttonStrings.get('tb-cookie-manager.label'),
		tooltiptext: buttonStrings.get('tb-cookie-manager.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.openMessengerWindowOrTab('chrome://messenger/content/preferences/cookies.xul', event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'exit',
		type: 'custom',
		label: buttonStrings.get('exit.label'),
		tooltiptext: buttonStrings.get('exit.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'exit';
			toolbarbutton_0.setAttribute('label', buttonStrings.get('exit.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('exit.tooltip'));
			toolbarbutton_0.setAttribute("command", "cmd_quit");
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			toolbarbutton_0.setAttribute("key", "key_quit");
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-view-menu',
		label: buttonStrings.get('tb-view-menu.label'),
		tooltiptext: buttonStrings.get('tb-view-menu.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.showAMenu(event, 'menu_View', 'view-menu');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'tb-saved-passwords',
		label: buttonStrings.get('tb-saved-passwords.label'),
		tooltiptext: buttonStrings.get('tb-saved-passwords.tooltip'),
		onClick: function(event) {
			toolbar_buttons.openMessengerWindowOrTab('chrome://passwordmgr/content/passwordManager.xul', event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'use-document-colors',
		label: buttonStrings.get('use-document-colors.label'),
		tooltiptext: buttonStrings.get('use-document-colors.tooltip'),
		onCommand: function(event) {
			var aThis = event.target;
			toolbar_buttons.toggleDocumentColors(aThis);
		},
		window: 'messageWindow.xul',
		onCreated: function(aNode) {
			var document = aNode.ownerDocument;
			toolbar_buttons.loadDocumentColors(document);
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'accountmanager',
		label: buttonStrings.get('accountmanager.label'),
		tooltiptext: buttonStrings.get('accountmanager.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.MsgAccountManager(null);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'extensions',
		label: buttonStrings.get('extensions.label'),
		tooltiptext: buttonStrings.get('extensions.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.OpenAddonsMgr(event, 'extensions', 'addons://list/extension');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'statusbar-toggle',
		label: buttonStrings.get('statusbar-toggle.label'),
		tooltiptext: buttonStrings.get('statusbar-toggle.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.goToggleToolbar('status-bar', 'menu_showTaskbar');
		},
		window: 'messageWindow.xul',
		onCreated: function(aNode) {
			var document = aNode.ownerDocument;
			toolbar_buttons.loadToggleToolbar(document, "statusbar-toggle", "status-bar");
toolbar_buttons.loadToggleToolbar(document, "statusbar-toggle", "addon-bar");
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'javaScriptConsole',
		label: buttonStrings.get('javaScriptConsole.label'),
		tooltiptext: buttonStrings.get('javaScriptConsole.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.toJavaScriptConsole();
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'addons',
		type: 'custom',
		label: buttonStrings.get('addons.label'),
		tooltiptext: buttonStrings.get('addons.tooltip'),
		window: 'messageWindow.xul',
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'addons';
			toolbarbutton_0.setAttribute("type", "menu-button");
			toolbarbutton_0.setAttribute('label', buttonStrings.get('addons.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('addons.tooltip'));
			toolbarbutton_0.addEventListener('command', function(event) {
				var window = event.target.ownerDocument.defaultView;
			window.openAddonsMgr();
			}, false);
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			toolbarbutton_0.setAttribute("key", "key_openAddons");
			var menupopup_1 = document.createElement('menupopup');
			menupopup_1.addEventListener('click', function(event) {
				event.stopPropagation();
			}, false);
			menupopup_1.addEventListener('command', function(event) {
				event.stopPropagation();
			}, false);
			var menuitem_2 = document.createElement('menuitem');
			menuitem_2.id = 'tb-addons-extensions';
			menuitem_2.setAttribute('label', buttonStrings.get('extensions.label'));
			menuitem_2.addEventListener('command', function(event) {
				toolbar_buttons.OpenAddonsMgr(event, 'extensions', 'addons://list/extension');
			}, false);
			menupopup_1.appendChild(menuitem_2);
			var menuitem_3 = document.createElement('menuitem');
			menuitem_3.id = 'tb-addons-themes';
			menuitem_3.setAttribute('label', buttonStrings.get('themes.label'));
			menuitem_3.addEventListener('command', function(event) {
				toolbar_buttons.OpenAddonsMgr(event, 'themes', 'addons://list/theme');
			}, false);
			menupopup_1.appendChild(menuitem_3);
			var menuseparator_4 = document.createElement('menuseparator');
			menupopup_1.appendChild(menuseparator_4);
			var menuitem_5 = document.createElement('menuitem');
			menuitem_5.id = 'tb-addons-install';
			menuitem_5.setAttribute('label', buttonStrings.get('installaddons.label'));
			menuitem_5.addEventListener('command', function(event) {
				toolbar_buttons.installAddons(event);
			}, false);
			menupopup_1.appendChild(menuitem_5);
			toolbarbutton_0.appendChild(menupopup_1);
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'attachments-delete',
		label: buttonStrings.get('attachments-delete.label'),
		tooltiptext: buttonStrings.get('attachments-delete.tooltip'),
		onCommand: function(event) {
			var window = event.target.ownerDocument.defaultView;
			window.HandleAllAttachments('delete');
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'change-text-direction',
		label: buttonStrings.get('change-text-direction.label'),
		tooltiptext: buttonStrings.get('change-text-direction.tooltip'),
		onCommand: function(event) {
			toolbar_buttons.changeTextDirection(event);
		},
		window: 'messageWindow.xul',
		toolbox: 'mail-toolbox'
	});

	CustomizableUI.createWidget({
		id: 'dictionary-list',
		type: 'custom',
		label: buttonStrings.get('dictionary-list.label'),
		tooltiptext: buttonStrings.get('dictionary-list.tooltip'),
		window: 'messageWindow.xul',
		onCreated: function(aNode){
			var document = aNode.ownerDocument;
			// copied off the context menu
		},
		onBuild: function (document) {
			var window = document.defaultView;
			var toolbarbutton_0 = document.createElement('toolbarbutton');
			toolbarbutton_0.id = 'dictionary-list';
			toolbarbutton_0.setAttribute("type", "menu");
			toolbarbutton_0.setAttribute('label', buttonStrings.get('dictionary-list.label'));
			toolbarbutton_0.setAttribute('tooltiptext', buttonStrings.get('dictionary-list.tooltip'));
			toolbarbutton_0.classList.add("toolbarbutton-1");
			toolbarbutton_0.classList.add("chromeclass-toolbar-additional");
			var menupopup_1 = document.createElement('menupopup');
			menupopup_1.addEventListener('command', function(event) {
				event.stopPropagation();
			}, false);
			menupopup_1.addEventListener('popupshowing', function(event) {
				var aThis = event.target;
			toolbar_buttons.addDictionaryList(aThis);
			}, false);
			toolbarbutton_0.appendChild(menupopup_1);
			return toolbarbutton_0;
		},
		toolbox: 'mail-toolbox'
	});
}

function loadButtons(window) {
	var document = window.document;
	var toolbox = document.getElementById('mail-toolbox');
	if(!toolbox) {
		return;
	}
	
	registerToolbars(window, document, []);
	
	
	toolbar_buttons.loadToggleToolbar(document, "statusbar-toggle", "status-bar");
toolbar_buttons.loadToggleToolbar(document, "statusbar-toggle", "addon-bar");
	// copied off the context menu
	toolbar_buttons.loadDocumentColors(document);
	toolbar_buttons.loadPrefWatcher(document, "mailnews.display.html_as", "html-mode");
	toolbar_buttons.loadPrefWatcher(document, "network.proxy.type", "toggle-proxy");
	toolbar_buttons.loadPrefWatcher(document, "network.proxy.type", null, toolbar_buttons.setProxyButtonState);
toolbar_buttons.loadPrefWatcher(document, "network.proxy.autoconfig_url", null, toolbar_buttons.setProxyButtonState);
	toolbar_buttons.loadPrefWatcher(document, "browser.display.use_document_fonts", "use-document-fonts");
	toolbar_buttons.allMenusStartUp(document);
}

function createToolbar(doc, toolbox, attributes, name) {
	var special = ["id", "class", "defaultset", "currentset"];
	var toolbar = doc.createElement('toolbar');
	for(var attr in attributes) {
		if(special.indexOf(attr) == -1) {
			toolbar.setAttribute(attr, attributes[attr]);
		}
	}
	toolbar.setAttribute('toolbarname', name);
	if(attributes.id) {
		toolbar.id = attributes.id;
	}
	if(attributes.class) {
		toolbar.className = attributes.class;
	}
	doc.getElementById(toolbox).appendChild(toolbar);
	// put after appending to stop Thunderbird/SeaMonkey loading the buttons
	// which messes with our CustomizableUI
	if(attributes.defaultset) {
		toolbar.setAttribute('defaultset', attributes['defaultset']);
	}
	if(attributes.currentset) {
		toolbar.setAttribute('currentset', attributes['currentset']);
	}
}

var gButtonIds = ["undo", "print-preview", "shift-delete", "help", "search-messages", "workoffline", "reduce", "themes", "tb-about-about", "minimize-window", "tb-file-menu", "find-prev", "tb-edit-menu", "toggle-read", "attachments-save", "redo", "find", "saveas", "delete-button", "about-plugins", "tb-tools-menu", "customize-toolbar", "toolbar-menu", "find-again", "enlarge", "html-mode", "installaddons", "forward-as-attachment", "reload-proxy", "import", "profile-folder", "select-all", "pagesetup", "search-addresses", "reset", "realNextMessage", "realPreviousMessage", "about-config", "forward-as-inline", "tb-all-menus", "page-source", "use-document-fonts", "toggle-proxy", "preferences", "restart-app", "about-application", "attachments-detach", "tb-cookie-manager", "exit", "tb-view-menu", "tb-saved-passwords", "use-document-colors", "accountmanager", "extensions", "statusbar-toggle", "javaScriptConsole", "addons", "attachments-delete", "change-text-direction", "dictionary-list"];

function unloadButtons(window) {
	var document = window.document;
	var toolbarIds = [];
	var uiIds = [];

	for(var t = 0; t < toolbarIds.length; t++) {
		var toolbar = document.getElementById(toolbarIds[t]);
		if(toolbar) {
			CustomizableUI.unregisterArea(toolbarIds[t], false);
			toolbar.parentNode.removeChild(toolbar);
		}
	}
	for(var i = 0; i < gButtonIds.length; i++) {
		var buttonId = gButtonIds[i];
		var key = document.getElementById(buttonId + '-key');
		if(key) {
			key.parentNode.removeChild(key);
		}
		var menuitem = document.getElementById(buttonId + '-menu-item');
		if(menuitem) {
			menuitem.parentNode.removeChild(menuitem);
		}
	}
	var menu = document.getElementById('toolbar-buttons-menu');
	if(menu && !menu.firstChild.firstChild) {
		menu.parentNode.removeChild(menu);
	}
	for(var i = 0; i < uiIds.length; i++) {
		var node = document.getElementById(uiIds[i]);
		while(node) {
			node.parentNode.removeChild(node);
			node = document.getElementById(uiIds[i]);
		}
	}
	for(var i = 0; i < gShutDownFunctions.length; i++) {
		try {
			gShutDownFunctions[i]();
		} catch(e) {}
	}
}

function shutdownButtons() {
	log(gButtonIds);
	for(var i = 0; i < gButtonIds.length; i++) {
		CustomizableUI.destroyWidget(gButtonIds[i]);
	}
}

function registerToolbars(window, document, toolbar_ids) {
	for(var i in toolbar_ids) {
		observeToolbar(window, document, toolbar_ids[i]);
		CustomizableUI.registerArea(toolbar_ids[i], {
			type: CustomizableUI.TYPE_TOOLBAR,
			defaultPlacements: [],
			defaultCollapsed: false
		}, true);
	}
}

function observeToolbar(window, document, toolbar_id) {
	var prefs = Cc['@mozilla.org/preferences-service;1'].getService(Ci.nsIPrefService)
			.getBranch("extension.tbutton." + 'toolbar_status.' + toolbar_id + '.');
	var toolbar = document.getElementById(toolbar_id);
	var observer = function(mutations) {
		mutations.forEach(function(mutation) {
			if(mutation.attributeName && (CustomizableUI.shim || mutation.attributeName != 'currentset')) {
				prefs.setCharPref(mutation.attributeName, toolbar.getAttribute(mutation.attributeName));
			}
		});
	}
	var mutationObserver = new window.MutationObserver(observer);
	var attrList = prefs.getChildList('', {});
	for(var i in attrList) {
		toolbar.setAttribute(attrList[i], prefs.getCharPref(attrList[i]));
	}
	mutationObserver.observe(toolbar, { attributes: true, subtree: false });
}

function log(e) {
	Cc["@mozilla.org/consoleservice;1"].getService(Ci.nsIConsoleService).logStringMessage(e);
}