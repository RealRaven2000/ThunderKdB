/*
 * This file was generated by the MozButton SDK,
 * which is part of the Toolbar Buttons project.
 * You should not edit this file, but rather download
 * the project source and rerun the builder.
 */

const Cc = Components.classes;
const Ci = Components.interfaces;
const Cu = Components.utils;

Cu.import("resource://gre/modules/Services.jsm");
var styleSheets = [Services.io.newURI("chrome://toolbar-buttons/skin/button.css", null, null)];

var gModules = {};

function getModules(uri) {
	var modules = [];
	if(uri == 'chrome://messenger/content/messengercompose/messengercompose.xul') {
		modules.push('chrome://toolbar-buttons/content/compose.jsm');
	} else if(uri == 'chrome://navigator/content/navigator.xul') {
		modules.push('chrome://toolbar-buttons/content/suite_browser.jsm');
	} else if(uri == 'chrome://browser/content/browser.xul') {
		modules.push('chrome://toolbar-buttons/content/browser.jsm');
	} else if(uri == 'chrome://messenger/content/messageWindow.xul') {
		modules.push('chrome://toolbar-buttons/content/read.jsm');
		modules.push('chrome://toolbar-buttons/content/mail-header.jsm');
	} else if(uri == 'chrome://calendar/content/calendar.xul') {
		modules.push('chrome://toolbar-buttons/content/calendar.jsm');
	} else if(uri == 'chrome://messenger/content/addressbook/addressbook.xul') {
		modules.push('chrome://toolbar-buttons/content/mail-address-book.jsm');
	} else if(uri == 'chrome://messenger/content/messenger.xul') {
		modules.push('chrome://toolbar-buttons/content/mail-header.jsm');
		modules.push('chrome://toolbar-buttons/content/lightning.jsm');
		modules.push('chrome://toolbar-buttons/content/mail.jsm');
	} else if(uri == 'chrome://sunbird/content/calendar.xul') {
		modules.push('chrome://toolbar-buttons/content/calendar.jsm');
	}
	return modules;
}

function loadIntoWindow(window) {
	// kind of dumb using the document uri, but it makes coping from the chrome.manifest easier
	let uri = window.document.documentURI;
	let modules = getModules(uri);
	if(modules) {
		for (var i = 0, len = styleSheets.length; i < len; i++) {
			try {
				window.QueryInterface(Ci.nsIInterfaceRequestor)
					.getInterface(Ci.nsIDOMWindowUtils).loadSheet(styleSheets[i], Ci.nsIDOMWindowUtils.AUTHOR_SHEET);
			} catch(e) {
				// throws error is there had been an unclean shutdown and the sheet is still loaded
			}
		}
		for(var i = 0; i < modules.length; i++) {
			try {
				var modPath = modules[i];
				if(gModules[modPath]) {
					var mod = gModules[modPath];
				} else {
					var mod = Cu.import(modPath);
					mod.setupButtons();
					gModules[modPath] = mod;
				}
				mod.loadButtons(window);
			} catch(e) {
				window.console.log(e);
			}
		}
	}
	if(uri == 'chrome://global/content/customizeToolbar.xul') {
		for (var j = 0, len = styleSheets.length; j < len; j++) {
			window.QueryInterface(Ci.nsIInterfaceRequestor)
				.getInterface(Ci.nsIDOMWindowUtils).loadSheet(styleSheets[j], Ci.nsIDOMWindowUtils.AUTHOR_SHEET);
		}
	}
}

function unloadFromWindow(window) {
	let uri = window.document.documentURI;
	let modules = getModules(uri);
	if(modules) {
		for (let i = 0, len = styleSheets.length; i < len; i++) {
			window.QueryInterface(Ci.nsIInterfaceRequestor)
				.getInterface(Ci.nsIDOMWindowUtils).removeSheet(styleSheets[i], Ci.nsIDOMWindowUtils.AUTHOR_SHEET);
		}
		for(var i = 0; i < modules.length; i++) {
			try {
				var modPath = modules[i];
				if(gModules[modPath]) {
					var mod = gModules[modPath];
					mod.unloadButtons(window);
				}
			} catch(e) {
				window.console.log(e);
			}
		}
	}
	if(uri == 'chrome://global/content/customizeToolbar.xul') {
		for (var i = 0, len = styleSheets.length; i < len; i++) {
			window.QueryInterface(Ci.nsIInterfaceRequestor)
				.getInterface(Ci.nsIDOMWindowUtils).removeSheet(styleSheets[i], Ci.nsIDOMWindowUtils.AUTHOR_SHEET);
		}
	}
}

var windowListener = {
	onOpenWindow: function(aWindow) {
		// Wait for the window to finish loading
		let domWindow = aWindow.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowInternal || Ci.nsIDOMWindow);
		domWindow.addEventListener("load", function onLoad() {
			domWindow.removeEventListener("load", onLoad, false);
			loadIntoWindow(domWindow);
		}, false);
	}, 
	onCloseWindow: function(aWindow) {},
	onWindowTitleChange: function(aWindow, aTitle) {}
};

function createResource(resourceName, uriPath) {
	let resource = Services.io.getProtocolHandler("resource").QueryInterface(Ci.nsIResProtocolHandler);
	var fileuri = Services.io.newURI(uriPath, null, null);
	resource.setSubstitution(resourceName, fileuri);
}

function startup(data, reason) {
	// set our default prefs
	try {
		Services.scriptloader.loadSubScript("chrome://toolbar-buttons/content/defaultprefs.js", {pref: setDefaultPref});
	} catch(e) {}
	
	createResource('toolbar-buttons', 'chrome://toolbar-buttons/content/resources/');

	let wm = Cc["@mozilla.org/appshell/window-mediator;1"].getService(Ci.nsIWindowMediator);

	// Load into any existing windows
	let windows = wm.getEnumerator(null);
	while (windows.hasMoreElements()) {
		let domWindow = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
		loadIntoWindow(domWindow);
	}
	// Load into any new windows
	wm.addListener(windowListener);
}

function shutdown(data, reason) {
	if (reason == APP_SHUTDOWN) {
		return;
	}

	let resource = Services.io.getProtocolHandler("resource").QueryInterface(Ci.nsIResProtocolHandler);
	resource.setSubstitution("toolbar-buttons", null);

	let wm = Cc["@mozilla.org/appshell/window-mediator;1"].getService(Ci.nsIWindowMediator);
 
	// Stop listening for new windows
	wm.removeListener(windowListener);

	// Unload from any existing windows
	let windows = wm.getEnumerator(null);
	while (windows.hasMoreElements()) {
		try {
			let domWindow = windows.getNext().QueryInterface(Ci.nsIDOMWindow);
			unloadFromWindow(domWindow);
		} catch(e) {
			log(e);
		}
	}
	// destroy the modules
	for(var modPath in gModules) {
		try {
			var mod = gModules[modPath];
			mod.shutdownButtons();
			Cu.unload(modPath);
		} catch(e) {
			log(e);
		}
	}
	gModules = {};
	Cu.unload("chrome://toolbar-buttons/content/customizable.jsm");
}

function install(data, reason) {
	var prefService = Cc['@mozilla.org/preferences-service;1'].getService(Ci.nsIPrefService);
	var prefs = prefService.getBranch("extension.tbutton.");
	var version = "1.1";
	var currentVersion = prefs.getCharPref("current.version");
	var url = "https://codefisher.org/toolbar_button/updated/1.1/";
	if(currentVersion == "") {
		url = "https://codefisher.org/toolbar_button/installed/1.1/";
	}
	if(currentVersion != version) {
		prefs.setCharPref("current.version", version);
		prefService.savePrefFile(null);
		let wm = Cc["@mozilla.org/appshell/window-mediator;1"].getService(Ci.nsIWindowMediator);
		let win =  wm.getMostRecentWindow("navigator:browser");
		if(win) {
			let domWindow = win.QueryInterface(Ci.nsIDOMWindow);
			if(win.document.readyState === "complete") {
				/* domWindow.getBrowser().selectedTab = */ domWindow.getBrowser().addTab(url);
			} else {
				domWindow.addEventListener("load", function startPageLoad() {
					domWindow.getBrowser().selectedTab = domWindow.getBrowser().addTab(url);
					domWindow.removeEventListener("load", startPageLoad, false);
				}, false);
			}
		} else {
			let win = wm.getMostRecentWindow(null);
			if(win) {
				var uri = Cc['@mozilla.org/network/io-service;1'].getService(Ci.nsIIOService).newURI(url, null, null);
				Cc['@mozilla.org/uriloader/external-protocol-service;1'].getService(Ci.nsIExternalProtocolService).loadUrl(uri);
			} else {
				var windowListener = {
					onOpenWindow: function (aWindow) {
						let domWindow = aWindow.QueryInterface(Ci.nsIInterfaceRequestor).getInterface(Ci.nsIDOMWindowInternal || Ci.nsIDOMWindow);
						domWindow.addEventListener("load", function onLoad() {
							domWindow.removeEventListener("load", onLoad, false);
							wm.removeListener(windowListener);
							try {
								var opened = false;
								var prefs = Cc['@mozilla.org/preferences-service;1'].getService(Ci.nsIPrefBranch);
								if(prefs.getIntPref('browser.startup.page') == 3 || prefs.getBoolPref('browser.sessionstore.resume_session_once')) {
									domWindow.document.addEventListener("SSTabRestoring", function tabRestored() {
										domWindow.document.addEventListener("SSTabRestoring", tabRestored, false);
										if(!opened) { // can't work out why it gets called mutiple times
											domWindow.getBrowser().addTab(url);
											opened = true;
										}
									}, false);
								} else {
									domWindow.getBrowser().addTab(url);
								}
							} catch(e) {
								var uri = Cc['@mozilla.org/network/io-service;1'].getService(Ci.nsIIOService).newURI(url, null, null);
								Cc['@mozilla.org/uriloader/external-protocol-service;1'].getService(Ci.nsIExternalProtocolService).loadUrl(uri);
							}
						}, false);
					},
					onCloseWindow: function (aWindow) {
					},
					onWindowTitleChange: function (aWindow, aTitle) {
					}
				};
				wm.addListener(windowListener);
			}
		}
	}
}

function uninstall(data, reason) {
}

function log(e) {
	Cc["@mozilla.org/consoleservice;1"].getService(Ci.nsIConsoleService).logStringMessage(e);
}

function getGenericPref(branch, prefName) {
	switch (branch.getPrefType(prefName)) {
		default:
		case 0:   return undefined;					  // PREF_INVALID
		case 32:  return getUCharPref(prefName,branch);  // PREF_STRING
		case 64:  return branch.getIntPref(prefName);	// PREF_INT
		case 128: return branch.getBoolPref(prefName);   // PREF_BOOL
	}
}

function setGenericPref(branch, prefName, prefValue) {
	switch (typeof prefValue) {
		case "string":
			setUCharPref(prefName, prefValue, branch);
			return;
		case "number":
			branch.setIntPref(prefName, prefValue);
			return;
		case "boolean":
			branch.setBoolPref(prefName, prefValue);
			return;
	}
}

function setDefaultPref(prefName, prefValue) {
	var defaultBranch = Services.prefs.getDefaultBranch(null);
	setGenericPref(defaultBranch ,prefName, prefValue);
}

function getUCharPref(prefName, branch) {
	branch = branch ? branch : Services.prefs;
	return branch.getComplexValue(prefName, Ci.nsISupportsString).data;
}

function setUCharPref(prefName, text, branch) {
	var string = Cc["@mozilla.org/supports-string;1"].createInstance(Ci.nsISupportsString);
	string.data = text;
	branch = branch ? branch : Services.prefs;
	branch.setComplexValue(prefName, Ci.nsISupportsString, string);
}
